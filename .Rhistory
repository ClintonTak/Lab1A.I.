install.packages(deliveryman)
install.packages("~/Downloads/Software/DeliveryMan_1.5.tar.gz", repos = NULL, type = "source")
library("DeliveryMan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
help?
;
help()
help("DeliveryMan")
help()
help()
runDeliveryMan()
warnings()
runDeliveryMan(carReady = basicDM)
runDeliveryMan(carReady = basicDM)
runDeliveryMan(carReady = ManualDM)
runDeliveryMan(carReady = manualDM)
runDeliveryMan(carReady = basicDM)
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
a<+ matrix(sample(1:dim,replace=T,5*del),ncol=5)
a<- matrix(sample(1:dim,replace=T,5*del),ncol=5)
a<- matrix(sample(1:10,replace=T,5*del),ncol=5)
a<- matrix(sample(1:10,replace=T,5*5),ncol=5)
a
a<- matrix(sample(1:10,replace=T,5*5),ncol=5)
a
a[,5]=rep(0,del)
a[,5]=rep(0,5)
a
runDeliveryMan(carReady = basicDM)
q
print(toGo)
toGo
toGo
print(which(packages[,5]==0)[1])
print(test)
return(toGo)
toGo=which(packages[,5]==0)[1]#boolean operator, just picks at random
toGo=which(packages[,5]==0)[1]#boolean operator, just picks at random
runDeliveryMan(carReady = basicDM)
runDeliveryMan(carReady = basicDM)
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packes[,5]=rep(0,del)
ag
doPlot=T
pause=0.1
del=5
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packages[,5]=rep(0,del)
roads=updateRoads(roads$hroads,roads$vroads)
roads=makeRoadMatrices(dim)
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
customDM(roads = 5, car = 3, packages )
}
}
customDM=function(roads,car,packages)
{
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packages[,5]=rep(0,del)
q
test
quit
}
roads=updateRoads(roads$hroads,roads$vroads)
test
test()
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
test = function()
{
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
dim=10
turns=2000
doPlot=T
pause=0.1
del=5
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packages[,5]=rep(0,del)
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
customDM(roads = 5, car = 3, packages )
}
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
for (i in length(packageX))
heuristicVal = abs(carX-packageX[i]) + abs(carY-packageY[i])
return(heuristicVal)
}
test = function()
{
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
dim=10
turns=2000
doPlot=T
pause=0.1
del=5
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packages[,5]=rep(0,del)
car=list(x=1,y=1,wait=0,load=0,nextMove=NA,mem=list())
customDM(roads = 5, car = 3, packages )
}
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
for (i in length(packageX))
heuristicVal = abs(carX-packageX[i]) + abs(carY-packageY[i])
return(heuristicVal)
}
test()
packages=matrix(sample(1:dim,replace=T,5*del),ncol=5)
packages[,5]=rep(0,del)
packages=matrix(sample(1:10,replace=T,5*5),ncol=5)
packages[,5]=rep(0,5)
packages
packages[2, 5]
packages[2, 5] = 1
packages[4, 5] = 1
packages
notpickedup=which(packages[,5]==0)
notpickedup
packageX = package[notpickedup, 1]
packageX = packages[notpickedup, 1]
packageX
packageX = packages[notpickedup, 2]
packageX
length(packageX)
for (i in length(packageX))
heuristicVal = abs(carX-packageX[i]) + abs(carY-packageY[i])
return(heuristicVal)
View(heuristic)
View(heuristic)
packageY = packages[notpickedup, 2]
packageX = packages[notpickedup, 1]
heuristic(1,1,packageX,packageY)
heuristic(1,1,packageX,packageY)
View(heuristic)
View(heuristic)
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
for (i in length(packageX))
{
heuristicVal[i] = abs(carX-packageX[i]) + abs(carY-packageY[i])
}
return(heuristicVal)
}
test()
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
for (i in length(packageX))
{
heuristicVal[i] = abs(carX-packageX[i]) + abs(carY-packageY[i])
}
return(heuristicVal)
}
View(test)
View(heuristic)
View(heuristic)
View(heuristic)
heuristic(1,1,packageX,packageY)
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
heuristicVal = c(1:length(packageX))
for (i in length(packageX))
{
heuristicVal[i] = abs(carX-packageX[i]) + abs(carY-packageY[i])
}
return(heuristicVal)
}
heuristic(1,1,packageX,packageY)
packageX
packages
abs(carX-packageX[0])
abs(1-packageX[0])
abs(1-packageX[2])
abs(1-packageX[1])
packageX[1]
abs(1-packageY[1])
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
heuristicVal = c(1:length(packageX))
for (i in length(packageX))
{
print(i)
heuristicVal[i] = abs(carX-packageX[i]) + abs(carY-packageY[i])
}
return(heuristicVal)
}
heuristic(1,1,packageX,packageY)
for (i in 1:length(packageX))
customDM=function(roads,car,packages)
{
nextMove=0
toGo=0
offset=0
if (car$load==0) { #decides which package to pick up next
carXCoord = car$x
carYCoord = car$y
notpickedup=which(packages[,5]==0) #list of packages that haven't been picked up
packageX = package[notpickedup, 1]
packageY = package[notpickedup, 2]
hVal = heuristic(carXCoord, carYCoord,packageX, packageY)
#for x in packages
#run heuristic on x
#store package with lowest x
#go to package with lowest x after loop terminates
}else { #decides which delivery to make
toGo=car$load
offset=2
}
}
heuristic = function(carX, carY, packageX, packageY) #x1 and y1 are current loc, x2 and y2 are destination
{
heuristicVal = c(1:length(packageX))
for (i in 1:length(packageX))
{
print(i)
heuristicVal[i] = abs(carX-packageX[i]) + abs(carY-packageY[i])
}
return(heuristicVal)
}
heuristic(1,1,packageX,packageY)
runDeliveryMan(carREady = basicDM)
runDeliveryMan(carReady = basicDM)
